# but call it DANmap. You will need it layer as a background for Danish data points.
l_dan <- leaflet()%>%
setView(10.05,56.46,zoom = 10)%>%
addTiles()
l_dan
# Task 2: Read in the googlesheet data you and your colleagues created
# into your DANmap object (with 11 background layers you created in Task 1).
DANmap_markers <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = paste(places$Description, "<br>", places$Type))
DANmap_markers
# Task 1: Create a Danish equivalent of AUSmap with Esri layers,
# but call it DANmap. You will need it layer as a background for Danish data points.
l_dan <- leaflet()%>%
setView(10.05,56.46,zoom = 9)%>%
addTiles()
l_dan
DANmap <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
DANmap
# Task 2: Read in the googlesheet data you and your colleagues created
# into your DANmap object (with 11 background layers you created in Task 1).
DANmap_markers <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = paste(places$Description, "<br>", places$Type))
DANmap_markers
# Task 3: Can you cluster the points in Leaflet?
# Hint: Google "clustering options in Leaflet in R"
DANmap_markers_cluster <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = paste(places$Description, "<br>", places$Type),clusterOptions = markerClusterOptions())
DANmap_markers_cluster
# Task 1: Create a Danish equivalent of AUSmap with Esri layers,
# but call it DANmap. You will need it layer as a background for Danish data points.
l_dan <- leaflet()%>%
setView(10.05,56.46,zoom = 5)%>%
addTiles()
l_dan
# Task 1: Create a Danish equivalent of AUSmap with Esri layers,
# but call it DANmap. You will need it layer as a background for Danish data points.
l_dan <- leaflet()%>%
setView(10.05,56.46,zoom = 7)%>%
addTiles()
l_dan
# Task 1: Create a Danish equivalent of AUSmap with Esri layers,
# but call it DANmap. You will need it layer as a background for Danish data points.
l_dan <- leaflet()%>%
setView(10.05,56.46,zoom = 6)%>%
addTiles()
l_dan
DANmap <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
DANmap
# Task 2: Read in the googlesheet data you and your colleagues created
# into your DANmap object (with 11 background layers you created in Task 1).
DANmap_markers <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = paste(places$Description, "<br>", places$Type))
DANmap_markers
# Task 3: Can you cluster the points in Leaflet?
# Hint: Google "clustering options in Leaflet in R"
DANmap_markers_cluster <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = paste(places$Description, "<br>", places$Type),clusterOptions = markerClusterOptions())
DANmap_markers_cluster
# Activate the library
library(leaflet)
library(googlesheets4)
library(tidyverse)
library(htmlwidgets) # not essential, only needed for saving the map as .html
# Task 1: Create a Danish equivalent of AUSmap with Esri layers,
# but call it DANmap. You will need it layer as a background for Danish data points.
l_dan <- leaflet()%>%
setView(10.05,56.46,zoom = 6)%>%
addTiles()
l_dan
for (provider in esri) {
l_dan <- l_dan %>% addProviderTiles(provider, group = provider)
}
# Now, prepare to select backgrounds by grabbing their names
esri <- grep("^Esri", providers, value = TRUE)
l_dan
for (provider in esri) {
l_dan <- l_dan %>% addProviderTiles(provider, group = provider)
}
l_dan
DANmap <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")
DANmap
# If you experience difficulty with your read_sheet() function (it is erroring out),
# uncomment and run the following function:
gs4_deauth()  # run this line and then rerun the read_sheet() function below
# Read in the Google sheet you've edited
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit?gid=148633452#gid=148633452",
col_types = "cccnncnc",   # check that you have the right number and type of columns
range = "DAM2025")  # select the correct worksheet name
glimpse(places)
# Task 2: Read in the googlesheet data you and your colleagues created
# into your DANmap object (with 11 background layers you created in Task 1).
DANmap_markers <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = paste(places$Description, "<br>", places$Type))
DANmap_markers
# Task 3: Can you cluster the points in Leaflet?
# Hint: Google "clustering options in Leaflet in R"
DANmap_markers_cluster <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = paste(places$Description, "<br>", places$Type),clusterOptions = markerClusterOptions())
DANmap_markers_cluster
DANmap_markers
# Task 2: Read in the googlesheet data you and your colleagues created
# into your DANmap object (with 11 background layers you created in Task 1).
DANmap_markers <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,)
DANmap_markers
# Task 2: Read in the googlesheet data you and your colleagues created
# into your DANmap object (with 11 background layers you created in Task 1).
DANmap_markers <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = paste(places$Description, "<br>", places$Type))
DANmap_markers
# Task 2: Read in the googlesheet data you and your colleagues created
# into your DANmap object (with 11 background layers you created in Task 1).
DANmap_markers <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
)
DANmap_markers
# Task 3: Can you cluster the points in Leaflet?
# Hint: Google "clustering options in Leaflet in R"
DANmap_markers_cluster <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
clusterOptions = markerClusterOptions())
DANmap_markers_cluster
# Solution
DANmap_markers_cluster_popup <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = FALSE)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = paste(places$Description, "<br>", places$Type),clusterOptions = markerClusterOptions())
DANmap_markers_cluster_popup
DANmap_markers_cluster_popup
saveWidget(DANmap_markers_cluster_popup, "DANmap.html", selfcontained = TRUE)
DANmap_markers_cluster
# Activate the library
library(leaflet)
library(googlesheets4)
library(tidyverse)
leaflet() %>%
addTiles() %>%
setView( lng = 2.34, lat = 48.85, zoom = 5 ) %>%  # let's use setView to navigate to our area
addProviderTiles("Esri.WorldPhysical", group = "Physical") %>%  # add physical background
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%  # add satellite image
addProviderTiles("MtbMap", group = "Geo") %>%               # add geomorphic units map
addLayersControl(                                 # we are adding layers control to the maps
baseGroups = c("Geo","Aerial", "Physical"),
options = layersControlOptions(collapsed = F))  # replace T with F and back and run it
leaflet() %>%
addTiles() %>%
setView( lng = 2.34, lat = 48.85, zoom = 5 ) %>%  # let's use setView to navigate to our area
addProviderTiles("Esri.WorldPhysical", group = "Physical") %>%  # add physical background
addProviderTiles("Esri.WorldImagery", group = "Aerial") %>%  # add satellite image
addProviderTiles("MtbMap", group = "Geo") %>%               # add geomorphic units map
addLayersControl(                                 # we are adding layers control to the maps
baseGroups = c("Geo","Aerial", "Physical"),
options = layersControlOptions(collapsed = T))  # replace T with F and back and run it
# Solution
DANmap_markers_cluster_popup <- l_dan %>%
addLayersControl(baseGroups = names(esri),
options = layersControlOptions(collapsed = T)) %>% #adds layer controls
addMiniMap(tiles = esri[[1]], toggleDisplay = TRUE,
position = "bottomright") %>% #adds minimap
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
htmlwidgets::onRender("
function(el, x) {
var myMap = this;
myMap.on('baselayerchange',
function (e) {
myMap.minimap.changeLayer(L.tileLayer.provider(e.name));
})
}") %>%
addControl("", position = "topright")%>%
addMarkers(lng = places$Longitude,
lat = places$Latitude,
popup = paste(places$Description, "<br>", places$Type),clusterOptions = markerClusterOptions())
DANmap_markers_cluster_popup
saveWidget(DANmap_markers_cluster_popup, "DANmap.html", selfcontained = TRUE)
library(htmlwidgets) # not essential, only needed for saving the map as .html
DANmap_markers_cluster_popup
saveWidget(DANmap_markers_cluster_popup, "DANmap.html", selfcontained = TRUE)
# Libraries
library(tidyverse)
library(googlesheets4)
library(leaflet)
# If you experience difficulty with your read_sheet() function (it is erroring out),
# uncomment and run the following function:
gs4_deauth()  # run this line and then rerun the read_sheet() function below
# Read in the Google sheet you've edited
places <- read_sheet("https://docs.google.com/spreadsheets/d/1PlxsPElZML8LZKyXbqdAYeQCDIvDps2McZx1cTVWSzI/edit?gid=148633452#gid=148633452",
col_types = "cccnncnc",   # check that you have the right number and type of columns
range = "DAM2025")  # select the correct worksheet name
glimpse(places)
# Libraries
library(tidyverse)
library(googlesheets4)
library(leaflet)
# Activate the library
library(leaflet)
library(htmlwidgets) # not essential, only needed for saving the map as .html
# Libraries
library(tidyverse)
library(googlesheets4)
library(leaflet)
# If you experience difficulty with your read_sheet() function (it is erroring out),
# uncomment and run the following function:
gs4_deauth()  # run this line and then rerun the read_sheet() function below
